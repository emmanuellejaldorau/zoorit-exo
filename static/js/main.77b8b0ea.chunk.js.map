{"version":3,"sources":["images/logo-ladress.svg","images/icon-heart.svg","SquareThumbnail.js","RoundThumbnail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SquareThumbnail","props","url","elt","useState","showCta","setShowCta","className","onMouseEnter","onMouseLeave","style","thumbnail","backgroundImage","coup_de_coeur","src","heartIcon","discount","title","value","textDecoration","hasDiscount","price","RoundThumbnail","App","block_title","links","data","setData","fetchData","a","axios","proxyurl","response","blocks","console","log","useEffect","map","x","i","key","includes","display","justifyContent","alignItems","marginRight","substring","height","logo","y","j","posts","z","k","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77b8b0ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-ladress.52bf3575.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-heart.c920efa8.svg\";","import React, { useState } from 'react';\nimport heartIcon from './images/icon-heart.svg';\n\nfunction SquareThumbnail(props) {\n    const {elt} = props;\n    const[showCta, setShowCta] = useState(false);\n    const setBackgroundImg = (url) =>{\n        return {backgroundImage: `url(${url})`}\n      } \n\n    const hasDiscount = (value) => {\n        if(value){\n            return {textDecoration: 'line-through'}\n        }\n    }\n    return (\n    <div className=\"squareThumbnail\" \n         onMouseEnter={() => setShowCta(true)}\n         onMouseLeave={() => setShowCta(false)}>\n        <div className=\"squareThumbnailImg\" style={setBackgroundImg(elt.thumbnail)}>\n            <div className=\"squareThumbnailIcons\">\n                <div>\n                {elt.coup_de_coeur && \n                    <div className=\"favorite\">\n                    <img src={heartIcon} />\n                    <p>Coup de coeur</p>\n                    </div>}\n                </div>\n                <div>\n                {elt.discount && <div className=\"promo\">PROMO</div>}\n                </div>\n            </div>\n            {showCta && <button className=\"cta square\">Acheter</button>} \n        </div>\n        <div>\n            <p className=\"squareThumbnailTitle\">{elt.title}</p>\n            <div className=\"price\">\n                <p style={hasDiscount(elt.discount)}>{elt.price}€</p>\n                {elt.discount && <p>{elt.discount}€</p>}\n            </div>\n        </div>\n    </div>\n)\n}\n\nexport default SquareThumbnail;","import React, { useState } from 'react';\n\nfunction RoundThumbnail(props) {\n    const {elt} = props;\n    const[showCta, setShowCta] = useState(false);\n    const setBackgroundImg = (url) =>{\n        return {backgroundImage: `url(${url})`}\n      } \n\n    return (\n        <div className=\"roundThumbnail\" \n             style={setBackgroundImg(elt.thumbnail)} \n             onMouseEnter={() => setShowCta(true)}\n             onMouseLeave={() => setShowCta(false)}>\n            <h3>{elt.title}</h3>\n            {showCta && <button className=\"cta\">Acheter</button>} \n        </div>\n)\n}\n\nexport default RoundThumbnail;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport logo from './images/logo-ladress.svg';\nimport SquareThumbnail from './SquareThumbnail';\nimport RoundThumbnail from './RoundThumbnail';\n\nfunction App() {\n  const initialData = [\n    {block_title:\"\", links:[{title:\"\", url:\"\", thumbnail:\"\"}]},\n    {block_title:\"\", links:[{title:\"\", url:\"\", thumbnail:\"\"}]}\n  ]\n  const [data, setData] = useState(initialData);\n\n  const fetchData = async () =>{\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = 'https://cdn.zoo-host.com/intehtml/';\n    let response = await axios(proxyurl + url)\n    setData(response.data.blocks);\n    console.log(\"happening\", response.data.blocks);\n\n  }\n\n  const getBlockTitle = (title) => {\n    return title.includes(\"immanquables\") ? title : \n      <div style={{display:'flex', justifyContent:'center', alignItems: 'center'}}>\n        <p style={{marginRight: '15px'}}>{title.substring(0,13)}</p> \n        <img height='30px' src={logo} />\n      </div>;\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, []);\n\n  return (\n    <>\n      <div className=\"main\">\n         {data.map((x, i) => {\n          return <div className={`mainLine${i}`} key={i} >\n            <h2>{getBlockTitle(x.block_title)}</h2>\n            <div className=\"thumbnailsLine\">\n              {x.links ? x.links.map((y,j) => <RoundThumbnail key={j} elt={y}/>)\n                : x.posts.map((z,k) => <SquareThumbnail key={k} elt={z}/>)\n              }\n            </div> \n          </div>\n        })}\n      </div>\n      <div className=\"bottom\"> \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}